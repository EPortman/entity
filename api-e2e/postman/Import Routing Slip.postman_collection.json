{
	"info": {
		"_postman_id": "fe3543af-caf6-4e9f-a1db-c5cc9d418e9f",
		"name": "Import Routing Slip",
		"description": "version=1.0.0\n\nBelow are the environment variables needed to run this collection with example value from DEV environment;\n\npay-api-base-url : [https://pay-api-dev.pathfinder.gov.bc.ca](https://pay-api-dev.pathfinder.gov.bc.ca)  \ntoken-url : [https://dev.oidc.gov.bc.ca/auth/realms/fcf0kpqr/protocol/openid-connect/token](https://dev.oidc.gov.bc.ca/auth/realms/fcf0kpqr/protocol/openid-connect/token)  \nservice-account-id : registries-public-user-test OR registries-staff-test  \nservice-account-secret:\n\nThe service account should have. fas_create role while importing the data\n\nuse one of the service account in prod like sbc-auth-admin and give it fas-create role",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Post - Routing Slip Creation",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"  pm.response.to.have.status(201);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"number\": \"{{number}}\",\n    \"routingSlipDate\": \"{{date}}\",\n    \"paymentAccount\": {\n        \"accountName\": \"{{name}}\"\n    },\n    \"payments\": [\n        {\n            \"chequeReceiptNumber\": \"{{receipt_number}}\",\n            \"paymentMethod\": \"CASH\",\n            \"paidAmount\": {{amount}},\n            \"paidUsdAmount\": 0\n        }\n    ]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{pay-api-base-url}}/api/v1/fas/routing-slips",
					"host": [
						"{{pay-api-base-url}}"
					],
					"path": [
						"api",
						"v1",
						"fas",
						"routing-slips"
					]
				},
				"description": "number - routing slip number\n\ndate - routing slip date\n\nname - entity name as in the UI\n\nreceipt_number - receipt number\n\n*amount - total amount*"
			},
			"response": []
		}
	],
	"auth": {
		"type": "oauth2",
		"oauth2": [
			{
				"key": "addTokenTo",
				"value": "header",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"function getvar(variableName) {",
					"    let value = pm.variables.get(variableName);",
					"    if (!value) throw new Error(",
					"        `Variable '${variableName}' is not defined.`);",
					"    return value;",
					"}",
					"",
					"let tokenUrl = getvar('token-url');",
					"let accountId = getvar('service-account-id');",
					"let accountSecret = getvar('service-account-secret');",
					"",
					"let getTokenRequest = {",
					"    method: 'POST',",
					"    url: tokenUrl,",
					"    header: {",
					"        'content-type': 'application/x-www-form-urlencoded',",
					"        'Authorization': 'Basic '+ btoa(accountId+':'+accountSecret)",
					"    },",
					" ",
					"    body: 'grant_type=client_credentials'",
					"    ",
					"};",
					"",
					"pm.sendRequest(getTokenRequest, (err, response) => {",
					"    let jsonResponse = response.json(),",
					"        newAccessToken = jsonResponse.access_token;",
					"",
					"    console.log({ err, jsonResponse, newAccessToken })",
					"",
					"    pm.environment.set('accessToken', newAccessToken);",
					"    pm.variables.set('accessToken', newAccessToken);",
					"});",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}